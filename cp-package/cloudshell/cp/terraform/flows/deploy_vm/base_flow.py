from __future__ import annotations

import json
from typing import TYPE_CHECKING

from cloudshell.cp.core.flows.deploy import AbstractDeployFlow
from cloudshell.cp.core.request_actions.models import (
    Attribute,
    DeployAppResult,
    VmDetailsData,
)
from cloudshell.cp.core.rollback import RollbackCommandsManager
from cloudshell.cp.core.utils.name_generator import NameGenerator

from cloudshell.cp.terraform.terraform_cp_shell import TerraformCPShell
from cloudshell.cp.terraform.utils.cs_helpers import on_task_progress_check_if_cancelled
# from cloudshell.cp.terraform.utils.vm_console_link_attr import (
#     get_deploy_app_vm_console_link_attr,
# )
from cloudshell.iac.terraform.services.object_factory import ObjectFactory
from cloudshell.iac.terraform.tagging.tags import TagsManager

if TYPE_CHECKING:
    from logging import Logger

    from cloudshell.api.cloudshell_api import CloudShellAPISession
    from cloudshell.cp.core.cancellation_manager import CancellationContextManager
    from cloudshell.cp.core.request_actions import DeployVMRequestActions
    from cloudshell.cp.core.reservation_info import ReservationInfo

    from cloudshell.cp.terraform.models.deploy_app import VMFromTerraformGit
    from cloudshell.cp.terraform.resource_config import TerraformResourceConfig


class TFDeployVMFlow(AbstractDeployFlow):
    def __init__(
        self,
        resource_config: TerraformResourceConfig,
        cs_api: CloudShellAPISession,
        reservation_info: ReservationInfo,
        cancellation_manager: CancellationContextManager,
        logger: Logger,
    ):
        super().__init__(logger=logger)
        self._resource_config = resource_config
        self._reservation_info = reservation_info
        self._cs_api = cs_api
        self._cancellation_manager = cancellation_manager
        self._rollback_manager = RollbackCommandsManager(logger=self._logger)
        self._on_task_progress = on_task_progress_check_if_cancelled(
            cancellation_manager
        )

        self.generate_name = NameGenerator(max_length=80)
        tags = TagsManager(self._reservation_info.reservation_id)
        self.tf_executor = TerraformCPShell(
            resource_config=self._resource_config,
            logger=self._logger,
            tag_manager=tags,
            sandbox_id=self._reservation_info.reservation_id
        )

    def _validate_deploy_app(self, deploy_app: VMFromTerraformGit):
        """Terraform plan."""

        pass

    def _prepare_vm_details_data(
        self, deployed_vm, deploy_app: VMFromTerraformGit
    ) -> VmDetailsData:
        """Prepare CloudShell VM Details model."""
        pass

    def _create_vm(
        self,
        deploy_app: VMFromTerraformGit,
        vm_name: str,
        vm_resource_pool,
        vm_storage,
        vm_folder,
        dc
    ):
        """Create VM on the TF."""
        pass

    # def _prepare_app_attrs(
    #     self, deploy_app: VMFromTerraformGit, vm: VmHandler
    # ) -> list[Attribute]:
    #     attrs = []
    #
    #     link_attr = get_deploy_app_vm_console_link_attr(
    #         deploy_app, self._resource_config, vm, vm.si
    #     )
    #     if link_attr:
    #         attrs.append(link_attr)
    #
    #     return attrs

    def _prepare_deploy_app_result(
        self,
        execution_outputs: tuple[dict, ...],
        deploy_app: VMFromTerraformGit,
        vm_name: str,
    ) -> DeployAppResult:
        vm_details_data = self._prepare_vm_details_data(
            deployed_vm=tf_handler,
            deploy_app=deploy_app,
        )

        self._logger.info(f"Prepared VM details: {vm_details_data}")

        return DeployAppResult(
            actionId=deploy_app.actionId,
            vmUuid=tf_handler.uuid,
            vmName=vm_name,
            vmDetailsData=vm_details_data,
            deployedAppAdditionalData={},
            deployedAppAttributes=[
                Attribute(
                    attributeName="Terraform DeployedApp 2G.Terraform Outputs",
                    attributeValue=json.dumps(execution_outputs[0])),
                Attribute(
                    attributeName="Terraform DeployedApp 2G.Terraform Sensitive Outputs",
                    attributeValue=json.dumps(execution_outputs[1]))
                ],
        )

    def _deploy(self, request_actions: DeployVMRequestActions) -> DeployAppResult:
        """Deploy TF VM."""
        # noinspection PyTypeChecker
        deploy_app: VMFromTerraformGit = request_actions.deploy_app

        # with self._cancellation_manager:
        #     self._validate_deploy_app(deploy_app)

        if deploy_app.autogenerated_name:
            vm_name = self.generate_name(deploy_app.app_name)
        else:
            vm_name = deploy_app.app_name

        self._logger.info(f"Generated name for the VM: {vm_name}")

        with self._rollback_manager:
            outputs = self.tf_executor.execute_terraform(deploy_app, vm_name)

        self._logger.info(f"Preparing Deploy App result for the {vm_name}")
        return self._prepare_deploy_app_result(
            execution_outputs=outputs,
            deploy_app=deploy_app,
            vm_name=vm_name,
        )
