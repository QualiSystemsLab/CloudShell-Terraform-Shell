from __future__ import annotations

from typing import TYPE_CHECKING

from cloudshell.cp.core.flows.deploy import AbstractDeployFlow
from cloudshell.cp.core.request_actions.models import DeployAppResult
from cloudshell.cp.core.rollback import RollbackCommandsManager
from cloudshell.cp.core.utils.name_generator import NameGenerator
from cloudshell.cp.terraform.models.tf_deploy_app_result import TFDeployAppResult
from cloudshell.cp.terraform.models.tf_deploy_result import TFDeployResult
from cloudshell.cp.terraform.terraform_cp_shell import TerraformCPShell
from cloudshell.cp.terraform.utils.cs_helpers import on_task_progress_check_if_cancelled
from cloudshell.iac.terraform.tagging.tags import TagsManager

if TYPE_CHECKING:
    from logging import Logger

    from cloudshell.api.cloudshell_api import CloudShellAPISession
    from cloudshell.cp.core.cancellation_manager import CancellationContextManager
    from cloudshell.cp.core.request_actions import DeployVMRequestActions
    from cloudshell.cp.core.reservation_info import ReservationInfo
    from cloudshell.cp.terraform.models.deploy_app import VMFromTerraformGit
    from cloudshell.cp.terraform.resource_config import TerraformResourceConfig


class TFDeployVMFlow(AbstractDeployFlow):
    def __init__(
        self,
        resource_config: TerraformResourceConfig,
        cs_api: CloudShellAPISession,
        reservation_info: ReservationInfo,
        cancellation_manager: CancellationContextManager,
        logger: Logger,
    ):
        super().__init__(logger=logger)
        self._resource_config = resource_config
        self._reservation_info = reservation_info
        self._cs_api = cs_api
        self._cancellation_manager = cancellation_manager
        self._rollback_manager = RollbackCommandsManager(logger=self._logger)
        self._on_task_progress = on_task_progress_check_if_cancelled(
            cancellation_manager
        )

        self.generate_name = NameGenerator(max_length=80)
        self.tf_executor = TerraformCPShell(
            resource_config=self._resource_config,
            logger=self._logger,
            sandbox_id=self._reservation_info.reservation_id,
        )

    def _prepare_deploy_app_result(
        self,
        tf_deploy_result: TFDeployResult,
    ) -> DeployAppResult:
        """Prepare Deploy App result."""

        return TFDeployAppResult.from_tf_deploy_result(
            tf_deploy_result=tf_deploy_result, resource_config=self._resource_config
        )

    def _deploy(self, request_actions: DeployVMRequestActions) -> DeployAppResult:
        """Deploy TF VM."""
        # noinspection PyTypeChecker
        deploy_app: VMFromTerraformGit = request_actions.deploy_app

        if deploy_app.autogenerated_name:
            vm_name = self.generate_name(deploy_app.app_name)
        else:
            vm_name = deploy_app.app_name

        self._logger.info(f"Generated name for the VM: {vm_name}")

        with self._rollback_manager:
            outputs = self.tf_executor.deploy_terraform(deploy_app, vm_name)

        self._logger.info(f"Preparing Deploy App result for the {vm_name}")
        return self._prepare_deploy_app_result(
            tf_deploy_result=outputs,
        )
