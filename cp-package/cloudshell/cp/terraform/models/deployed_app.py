from __future__ import annotations

from cloudshell.cp.core.request_actions import (
    DeployedVMActions,
    GetVMDetailsRequestActions,
)
from cloudshell.cp.core.request_actions.models import DeployedApp
from cloudshell.cp.terraform import constants
from cloudshell.cp.terraform.models.base_deployment_app import (
    ResourceAttrRODeploymentPath,
    ResourceBoolAttrRODeploymentPath,
    ResourceDictAttrRODeploymentPath,
    ResourceDictPasswordAttrRODeploymentPath,
    TerraformDeploymentAppAttributeNames,
)


class BaseTFDeployedApp(DeployedApp):
    ATTR_NAMES = TerraformDeploymentAppAttributeNames
    DEPLOYMENT_PATH = constants.VM_FROM_TF_GIT

    autogenerated_name: str = ResourceBoolAttrRODeploymentPath(
        ATTR_NAMES.autogenerated_name
    )
    branch: str = ResourceAttrRODeploymentPath(ATTR_NAMES.branch)
    cloud_provider: str = ResourceAttrRODeploymentPath(ATTR_NAMES.cloud_provider)
    custom_tags: dict = ResourceDictAttrRODeploymentPath(ATTR_NAMES.custom_tags)
    git_terraform_url: str = ResourceAttrRODeploymentPath(ATTR_NAMES.git_terraform_url)
    terraform_app_inputs_map: dict[str:str] = ResourceDictAttrRODeploymentPath(
        ATTR_NAMES.terraform_app_inputs_map
    )
    terraform_app_outputs_map: dict[str:str] = ResourceDictAttrRODeploymentPath(
        ATTR_NAMES.terraform_app_outputs_map
    )
    terraform_inputs: dict = ResourceDictAttrRODeploymentPath(
        ATTR_NAMES.terraform_inputs
    )
    terraform_sensitive_inputs: dict = ResourceDictPasswordAttrRODeploymentPath(
        ATTR_NAMES.terraform_sensitive_inputs
    )

    def get_app_inputs(self) -> dict[str:str]:
        """Get the app inputs.

        :return: dict of app inputs
        :rtype: dict[str: str]
        """
        attributes = self.attributes
        inputs = {}

        for input_name, attribute_name in self.terraform_app_inputs_map.items():
            attr = attributes.get(attribute_name)
            if attr:
                inputs[input_name] = attr

        return inputs

    @property
    def full_name_attrs_map(self):
        """Get full name attributes map.

        :return: dict of full name attributes
        :rtype: dict[str: str]
        """
        attrs_map = {}
        for attr_name, attr in self.attributes.items():
            if attr_name.startswith(self.DEPLOYMENT_PATH):
                continue
            attrs_map[attr_name.split(".")[-1]] = attr_name
        return attrs_map

    def get_app_resource_attribute(self, attr_name):
        """Get App Resource attribute by its name.

        :param str attr_name:
        :return:
        """
        for attr, value in self.attributes.items():
            if any([attr == attr_name, attr.endswith(f".{attr_name}")]):
                return value


class TFGetVMDetailsRequestActions(GetVMDetailsRequestActions):
    deployed_app: BaseTFDeployedApp


class TFDeployedVMActions(DeployedVMActions):
    deployed_app: BaseTFDeployedApp
